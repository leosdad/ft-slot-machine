
// fischertechnik / Arduino Slots
// Rubem Pechansky 2023

// -------------------------------------------------------------------- Includes

#include <Eventually.h>
#include "slots-main.h"

#include "game.h"
#include "reel.h"

// ------------------------------------------------------------ Global variables

EvtManager mgr;

bool blinkerInvertLed();
bool blinkerToggler();
// Slot machine variables

Game game;

// -------------------------- SAEM DAQUI

EvtTimeListener blinkerTimerListener(200, true, (EvtAction)blinkerInvertLed);
EvtPinListener blinkerBtnListener(BUTTON_PIN, 7, LOW, (EvtAction)blinkerToggler);

bool blinkerActive = HIGH;
bool blinkerLedOn = HIGH;

bool blinkerInvertLed()
{
	analogWrite(rightLedPin, blinkerLedOn ? 50 : 0);
	analogWrite(leftLedPin, blinkerLedOn ? 0 : 100);
	digitalWrite(lockLEDPins[0], blinkerLedOn);
	digitalWrite(lockLEDPins[1], blinkerLedOn);
	digitalWrite(lockLEDPins[2], blinkerLedOn);
	blinkerLedOn = !blinkerLedOn;
}

bool blinkerToggler()
{
	mgr.reset();
	mgr.addListener(&blinkerBtnListener);
	if(blinkerActive) {
		mgr.addListener(&blinkerTimerListener);
	} else {
		blinkerLedOn = LOW;
		analogWrite(LIGHT_PIN, blinkerLedOn ? 10 : 0);
	}

	blinkerActive = !blinkerActive;
}

void bah()
{
	blinkerLedOn = HIGH;

	digitalWrite(signalLED1Gnd, LOW);
	digitalWrite(signalLED2Gnd, LOW);
	digitalWrite(signalLED1Pin, HIGH);
	digitalWrite(signalLED2Pin, HIGH);

	mgr.addListener(&blinkerBtnListener);
	analogWrite(lockLEDPins[2], 50);
}

// ---------------------------------------------------- Private member functions

void SlotsMain::ioSetup()
{
	// Sets initial pin modes for the Mega 2560

	pinMode(signalLED1Gnd, OUTPUT);
	pinMode(signalLED2Gnd, OUTPUT);
	pinMode(signalLED1Pin, OUTPUT);
	pinMode(signalLED2Pin, OUTPUT);
	pinMode(lockLEDPins[0], OUTPUT);
	pinMode(lockLEDPins[1], OUTPUT);
	pinMode(lockLEDPins[2], OUTPUT);
	pinMode(BUTTON_PIN, INPUT_PULLUP);
}

// ----------------------------------------------------- Public member functions

void SlotsMain::Setup()
{
	ioSetup();
	bah();
}

void SlotsMain::Loop()
{
	mgr.loopIteration();
}

#pragma endregion
